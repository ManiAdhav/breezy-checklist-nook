
import { List } from '@/types/task';
import { generateId } from '@/utils/taskUtils';
import { ApiResponse } from '../types';
import { getStoredCustomLists, getStoredTasks, storeCustomLists, storeTasks } from './storageUtils';
import { handleServiceError } from './errorUtils';
import { supabase } from '@/integrations/supabase/client';

// List API methods
export const getLists = async (): Promise<ApiResponse<List[]>> => {
  try {
    // First try to get lists from Supabase if the user is authenticated
    const { data: session } = await supabase.auth.getSession();
    
    if (session?.session) {
      // Try to query custom lists from user_entries table
      const { data, error } = await supabase
        .from('user_entries')
        .select('*')
        .eq('entry_type', 'custom_list');
      
      if (error) {
        console.error('Supabase error:', error);
        // Fall back to localStorage
      } else if (data && data.length > 0) {
        // Convert the data format to our list format
        const lists: List[] = data.map(entry => {
          try {
            const listData = JSON.parse(entry.content);
            return {
              id: entry.id,
              name: listData.name,
              icon: listData.icon,
              ...listData
            };
          } catch (e) {
            console.error('Error parsing list data:', e);
            return null;
          }
        }).filter(Boolean) as List[];
        
        console.log('Retrieved lists from Supabase:', lists.length);
        
        // Store to localStorage as backup
        storeCustomLists(lists);
        
        return { success: true, data: lists };
      }
    }
    
    // Fall back to localStorage
    const lists = getStoredCustomLists();
    console.log('Using localStorage lists:', lists);
    return { success: true, data: lists };
  } catch (error) {
    return handleServiceError<List[]>(error, 'Failed to fetch lists');
  }
};

export const createList = async (list: Omit<List, 'id'>): Promise<ApiResponse<List>> => {
  try {
    const newList: List = {
      ...list,
      id: generateId()
    };
    
    // First try to store in Supabase if user is authenticated
    const { data: session } = await supabase.auth.getSession();
    
    if (session?.session) {
      // Store list as JSON in user_entries table
      const { data, error } = await supabase
        .from('user_entries')
        .insert([{
          entry_type: 'custom_list',
          content: JSON.stringify(newList)
        }])
        .select()
        .single();
      
      if (error) {
        console.error('Supabase error:', error);
        // Fall back to localStorage
      } else if (data) {
        console.log('List saved to Supabase:', data.id);
        
        // Create the list with the ID from Supabase
        const listWithId: List = {
          ...newList,
          id: data.id // Use the ID generated by Supabase
        };
        
        // Also update localStorage as backup
        const lists = getStoredCustomLists();
        storeCustomLists([...lists, listWithId]);
        
        return { success: true, data: listWithId };
      }
    }
    
    // Fall back to localStorage
    const lists = getStoredCustomLists();
    const updatedLists = [...lists, newList];
    storeCustomLists(updatedLists);
    console.log('List saved to localStorage:', newList);
    
    return { success: true, data: newList };
  } catch (error) {
    return handleServiceError<List>(error, 'Failed to create list');
  }
};

export const updateList = async (id: string, updates: Partial<List>): Promise<ApiResponse<List>> => {
  try {
    const lists = getStoredCustomLists();
    const listIndex = lists.findIndex(list => list.id === id);
    
    if (listIndex === -1) {
      return { success: false, error: 'List not found' };
    }
    
    const updatedList = { 
      ...lists[listIndex], 
      ...updates
    };
    
    // First try to update in Supabase if user is authenticated
    const { data: session } = await supabase.auth.getSession();
    
    if (session?.session) {
      const { data, error } = await supabase
        .from('user_entries')
        .update({
          content: JSON.stringify(updatedList)
        })
        .eq('id', id)
        .eq('entry_type', 'custom_list')
        .select()
        .single();
      
      if (error) {
        console.error('Supabase update error:', error);
        // Fall back to localStorage
      } else if (data) {
        console.log('List updated in Supabase:', data.id);
        
        // Also update localStorage as backup
        lists[listIndex] = updatedList;
        storeCustomLists(lists);
        
        return { success: true, data: updatedList };
      }
    }
    
    // Fall back to localStorage
    lists[listIndex] = updatedList;
    storeCustomLists(lists);
    console.log('List updated in localStorage:', updatedList);
    
    return { success: true, data: updatedList };
  } catch (error) {
    return handleServiceError<List>(error, 'Failed to update list');
  }
};

export const deleteList = async (id: string): Promise<ApiResponse<void>> => {
  try {
    // First try to delete from Supabase if user is authenticated
    const { data: session } = await supabase.auth.getSession();
    
    if (session?.session) {
      const { error } = await supabase
        .from('user_entries')
        .delete()
        .eq('id', id)
        .eq('entry_type', 'custom_list');
      
      if (error) {
        console.error('Supabase delete error:', error);
        // Fall back to localStorage
      } else {
        console.log('List deleted from Supabase:', id);
      }
    }
    
    // Always update localStorage regardless of Supabase result
    const lists = getStoredCustomLists();
    const updatedLists = lists.filter(list => list.id !== id);
    
    if (updatedLists.length === lists.length) {
      return { success: false, error: 'List not found' };
    }
    
    storeCustomLists(updatedLists);
    
    // Update tasks to move them to inbox
    const tasks = getStoredTasks();
    const updatedTasks = tasks.map(task => 
      task.listId === id 
        ? { ...task, listId: 'inbox' } 
        : task
    );
    
    storeTasks(updatedTasks);
    console.log('List deleted from localStorage and tasks moved to inbox:', id);
    
    return { success: true };
  } catch (error) {
    return handleServiceError<void>(error, 'Failed to delete list');
  }
};
